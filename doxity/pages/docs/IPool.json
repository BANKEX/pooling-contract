{"fileName":"/contracts/custom/pooling.sol","name":"IPool","abi":[{"constant":true,"inputs":[],"name":"startRaising","outputs":[{"name":"","type":"uint256"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":false,"inputs":[{"name":"_tokenAddress","type":"address"}],"name":"setTargetToken","outputs":[{"name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":false,"inputs":[{"name":"_value","type":"uint256"}],"name":"releaseInterest","outputs":[{"name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":false,"inputs":[{"name":"_value","type":"uint256"}],"name":"getRaisingETH","outputs":[{"name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":true,"inputs":[],"name":"icoManager","outputs":[{"name":"","type":"address"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[],"name":"targetToken","outputs":[{"name":"","type":"address"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[],"name":"allowedTokens","outputs":[{"name":"","type":"uint256"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[],"name":"poolState","outputs":[{"name":"","type":"uint8"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[{"name":"","type":"address"}],"name":"approvedInvestors","outputs":[{"name":"","type":"uint8"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[],"name":"minimalDeposit","outputs":[{"name":"","type":"uint256"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":false,"inputs":[{"name":"_value","type":"uint256"}],"name":"moneyBack","outputs":[{"name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":false,"inputs":[{"name":"_investor","type":"address"}],"name":"approveInvestor","outputs":[{"name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":true,"inputs":[],"name":"icoStart","outputs":[{"name":"","type":"uint256"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[],"name":"owner","outputs":[{"name":"","type":"address"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":false,"inputs":[{"name":"_value","type":"uint256"}],"name":"releaseEtherFromDepricatedFund","outputs":[{"name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":true,"inputs":[],"name":"maximalFundSize","outputs":[{"name":"","type":"uint256"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[],"name":"investorETHBalance","outputs":[{"name":"","type":"uint256"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[],"name":"raisingTimeout","outputs":[{"name":"","type":"uint256"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[],"name":"fundDeprecatedTimeout","outputs":[{"name":"","type":"uint256"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[],"name":"investorTokenBalance","outputs":[{"name":"","type":"uint256"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[],"name":"totalAcceptedETH","outputs":[{"name":"","type":"uint256"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":false,"inputs":[{"name":"_manager","type":"address"}],"name":"setManager","outputs":[{"name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":false,"inputs":[{"name":"_value","type":"uint256"}],"name":"releaseTokensFromDepricatedFund","outputs":[{"name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":true,"inputs":[],"name":"poolManager","outputs":[{"name":"","type":"address"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[],"name":"minimalFundSize","outputs":[{"name":"","type":"uint256"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":false,"inputs":[{"name":"newOwner","type":"address"}],"name":"transferOwnership","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"},{"anonymous":false,"inputs":[{"indexed":true,"name":"to","type":"address"},{"indexed":false,"name":"value","type":"uint256"}],"name":"MoneyBack","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"name":"from","type":"address"},{"indexed":true,"name":"to","type":"address"},{"indexed":false,"name":"value","type":"uint256"}],"name":"TransferToIcoManager","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"name":"from","type":"address"},{"indexed":true,"name":"to","type":"address"},{"indexed":true,"name":"value","type":"uint256"}],"name":"TokenTransfer","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"name":"from","type":"address"},{"indexed":true,"name":"to","type":"address"},{"indexed":true,"name":"value","type":"uint256"}],"name":"ETHTransfer","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"name":"form","type":"address"},{"indexed":true,"name":"to","type":"address"},{"indexed":true,"name":"value","type":"uint256"}],"name":"Invest","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"name":"previousOwner","type":"address"},{"indexed":true,"name":"newOwner","type":"address"}],"name":"OwnershipTransferred","type":"event"}],"bin":"","opcodes":"","source":"pragma solidity ^0.4.21;\r\nimport \"../ownership/Ownable.sol\";\r\nimport \"../math/SafeMath.sol\";\r\nimport \"../token/ERC20/ERC20.sol\";\r\n\r\ncontract IPool is Ownable {\r\n\r\n  address public poolManager;\r\n  address public icoManager;\r\n  address public owner;\r\n  address public targetToken;\r\n  uint256 public startRaising;\r\n  uint256 public raisingTimeout;\r\n  uint256 public icoStart;\r\n  uint256 public minimalDeposit;\r\n  uint256 public minimalFundSize;\r\n  uint256 public maximalFundSize;\r\n  uint256 public fundDeprecatedTimeout;\r\n  uint256 public totalAcceptedETH;\r\n  uint256 internal collectedFundForTokens;\r\n  uint256 internal usedAllowance;\r\n  // uint256 public icoTimeout;\r\n\r\n  mapping (address => uint8) public approvedInvestors;\r\n  mapping (address => uint256) internal investorSum;\r\n  mapping (address => uint256) internal receivedTokens;\r\n  mapping (address => uint256) internal receivedETH;\r\n  \r\n  function setManager(address _manager) public returns(bool);\r\n  function setTargetToken(address _tokenAddress) public returns(bool);\r\n  function moneyBack(uint256 _value) public returns(bool);\r\n  function approveInvestor(address _investor)  public returns(bool);\r\n  function getRaisingETH(uint256 _value) public returns(bool);\r\n  function calculateAllowedTokenBalance(address _owner) private view returns(uint256);\r\n  function calculateAllowedETHBalance(address _owner) private view returns(uint256);\r\n  function investorTokenBalance() public view returns(uint256);\r\n  function investorETHBalance() public view returns(uint256);\r\n  function releaseInterest(uint256 _value) public returns(bool);\r\n  function allowedTokens() public view returns(uint256);\r\n  function releaseEtherFromDepricatedFund(uint256 _value) public returns(bool);\r\n  function releaseTokensFromDepricatedFund(uint256 _value) public returns(bool);\r\n  function poolState_() private view returns(uint8);\r\n  function poolState() public view returns(uint8);\r\n\r\n  event MoneyBack(address indexed to, uint256 value);\r\n  event TransferToIcoManager(address indexed from, address indexed to, uint256 value);\r\n  event TokenTransfer(address indexed from, address indexed to, uint256 indexed value);\r\n  event ETHTransfer(address indexed from, address indexed to, uint256 indexed value);\r\n  event Invest(address indexed form, address indexed to, uint256 indexed value);\r\n\r\n}\r\n\r\ncontract PoolModifiers is IPool {\r\n\r\n  modifier onlyApproved() {\r\n    require(approvedInvestors[msg.sender] == 1);\r\n    _;\r\n  }\r\n    \r\n  modifier onlyIcoManager() {\r\n    require(icoManager == msg.sender);\r\n    _;\r\n  }\r\n    \r\n  modifier onlyPoolManager() {\r\n    require(poolManager == msg.sender);\r\n    _;\r\n  }\r\n    \r\n  modifier acceptedDeposit() {\r\n    require(minimalDeposit <= msg.value);\r\n    _;\r\n  }\r\n    \r\n  modifier acceptedRaisingTimeout() {\r\n    require(block.timestamp <= raisingTimeout);\r\n    _;\r\n  }\r\n\r\n}\r\n\r\ncontract Pool is PoolModifiers {\r\n    \r\n  using SafeMath for uint256;\r\n\r\n  /**\r\n  * @dev constructor of Pooling token\r\n  */\r\n  constructor() public{ \r\n    poolManager = msg.sender;\r\n    owner = msg.sender;\r\n    minimalDeposit = 1e8;\r\n    minimalFundSize = 1e18;\r\n    maximalFundSize = 20e18;\r\n    startRaising = now + 100;\r\n    raisingTimeout = now + 120;\r\n    icoStart = now + 140; \r\n    // icoTimeout = 1635556505;\r\n    fundDeprecatedTimeout = now + 400;\r\n  }\r\n  \r\n  \r\n  /**\r\n  * @dev set ICO manager\r\n  * @param _manager of ICO manager\r\n  * @return result of operation: true if success\r\n  */\r\n  function setManager(address _manager) public onlyOwner returns(bool) {\r\n    icoManager = _manager;\r\n    return true;\r\n  }\r\n  \r\n  /**\r\n  * @dev set targetToken address\r\n  * @param _tokenAddress token address\r\n  * @return result of operation: true if success\r\n  */\r\n  function setTargetToken(address _tokenAddress) public onlyIcoManager returns(bool) {\r\n    targetToken = _tokenAddress;\r\n    return true;\r\n  }\r\n\r\n  /**\r\n  * @dev payable function to accept ETH from approved investors\r\n  */\r\n  function () public payable onlyApproved acceptedDeposit acceptedRaisingTimeout {\r\n    require(maximalFundSize >= totalAcceptedETH.add(msg.value));\r\n    totalAcceptedETH = totalAcceptedETH.add(msg.value);\r\n    investorSum[msg.sender] = investorSum[msg.sender].add(msg.value);\r\n    emit Invest(msg.sender, this, msg.value);\r\n  }\r\n\r\n  /**\r\n  * @dev investors can return their dividents by using this function \r\n  * @param _value amount of ETH to return to investor\r\n  * @return result of operation: true if success\r\n  */\r\n  function moneyBack(uint256 _value) public returns(bool) {\r\n    require(poolState_() == 3);\r\n    require(investorSum[msg.sender] >= _value);\r\n    require(_value >= minimalDeposit);\r\n    investorSum[msg.sender] = investorSum[msg.sender].sub(_value);\r\n    totalAcceptedETH = totalAcceptedETH.sub(_value);\r\n    msg.sender.transfer(_value);\r\n    emit MoneyBack(msg.sender, _value);\r\n    return true;\r\n  }\r\n\r\n  /**\r\n  * @dev allow to apporove invesotors of pooling account\r\n  * @param _investor address of investor who will be approved\r\n  * @return result of operation: true if success\r\n  */  \r\n  function approveInvestor(address _investor)  public onlyOwner returns(bool) {\r\n    approvedInvestors[_investor] = 1;\r\n    return true;\r\n  }\r\n  \r\n  /**\r\n  * @dev transfer collected amount of ETH to ICO manager address\r\n  * @param _value in ETH 10^18 which ICO manager wants to get\r\n  * @return result of operation: true if success\r\n  */\r\n  function getRaisingETH(uint256 _value) public onlyIcoManager returns(bool) {\r\n    require(poolState_() >= 2 && poolState_() != 0xFF);  \r\n    require(totalAcceptedETH >= _value);\r\n    totalAcceptedETH = totalAcceptedETH.sub(_value);\r\n    icoManager.transfer(_value);\r\n    collectedFundForTokens = collectedFundForTokens.add(_value);\r\n    emit TransferToIcoManager(targetToken, icoManager, _value);\r\n    return true;\r\n  }\r\n  \r\n  /**\r\n  * @dev calculate amount of tokens that investor can spend \r\n  * @param _owner investor's address\r\n  * @return allowed amount of tokens \r\n  */\r\n  function calculateAllowedTokenBalance(address _owner) private view returns(uint256) {\r\n    ERC20 ico_contract = ERC20(targetToken);\r\n    uint256 totalAllowance = ico_contract.allowance(icoManager, this);\r\n    return (investorSum[_owner].mul(totalAllowance.add(usedAllowance)).div(totalAcceptedETH.add(collectedFundForTokens))).sub(receivedTokens[_owner]);\r\n  }\r\n  \r\n  /**\r\n  * @dev calculate amount of ETH that investor can spend \r\n  * @param _owner investor's address\r\n  * @return allowed amount of ETH \r\n  */\r\n  function calculateAllowedETHBalance(address _owner) private view returns(uint256) {\r\n    return (investorSum[_owner].mul(totalAcceptedETH).div(totalAcceptedETH.add(collectedFundForTokens))).sub(receivedETH[_owner]);\r\n  }\r\n  \r\n  /**\r\n  * @dev returns amount of tokens on invesotr's balance\r\n  * @return amount of tokens\r\n  */\r\n  function investorTokenBalance() public view returns(uint256) {\r\n    return calculateAllowedTokenBalance(msg.sender);\r\n  }\r\n  \r\n  /**\r\n  * @dev returns amount of ETH on invesotr's balance\r\n  * @return amount of ETH\r\n  */\r\n  function investorETHBalance() public view returns(uint256) {\r\n    return calculateAllowedETHBalance(msg.sender);\r\n  }\r\n  \r\n  /**\r\n  * @dev transfer dividnets to invstor address in ETH\r\n  * @param _value amount of ETH in 10^18\r\n  * @return result of operation: true if success\r\n  */\r\n  function releaseInterest(uint256 _value) public returns(bool) {\r\n    require(poolState_() == 4);\r\n    uint256 currentTokenBalance = calculateAllowedTokenBalance(msg.sender);\r\n    require(currentTokenBalance >= _value);\r\n    ERC20 ico_contract = ERC20(targetToken);\r\n    ico_contract.transferFrom(icoManager, msg.sender, _value);\r\n    receivedTokens[msg.sender] = receivedTokens[msg.sender].add(_value);\r\n    usedAllowance = usedAllowance.add(_value);\r\n    emit TokenTransfer(targetToken, msg.sender, _value);\r\n    uint256 calcETH = _value.mul(calculateAllowedETHBalance(msg.sender)).div(currentTokenBalance);\r\n    msg.sender.transfer(calcETH);\r\n    receivedETH[msg.sender] = receivedETH[msg.sender].add(calcETH);\r\n    emit ETHTransfer(this, msg.sender, calcETH);\r\n    return true;\r\n  }\r\n  \r\n  /**\r\n  * @dev return amount of allowed tokens which ICO manager approve to smart contract\r\n  * @return amount of tokens\r\n  */\r\n  function allowedTokens() public view onlyPoolManager returns(uint256) {\r\n    ERC20 ercToken = ERC20(targetToken);\r\n    return ercToken.allowance(icoManager, this);\r\n  }\r\n  \r\n  /**\r\n  * @dev transfer all amount of ETH from pooling contract when fund id depricated\r\n  * @return result of operation: true if success\r\n  */\r\n  function releaseEtherFromDepricatedFund(uint256 _value) public onlyPoolManager returns(bool) {\r\n    require(poolState_() == 0xFF);\r\n    require(totalAcceptedETH >= _value);\r\n    poolManager.transfer(_value);\r\n    totalAcceptedETH = totalAcceptedETH.sub(_value);\r\n    emit ETHTransfer(this, poolManager, _value);\r\n    return true;\r\n  } \r\n  \r\n  /**\r\n  * @dev transfer all amount of tokens from pooling contract when fund id depricated\r\n  * @return result of operation: true if success\r\n  */\r\n  function releaseTokensFromDepricatedFund(uint256 _value) public onlyPoolManager returns(bool) {\r\n    require(poolState_() == 0xFF);\r\n    ERC20 ercToken = ERC20(targetToken);\r\n    uint256 totalAllowance = ercToken.allowance(icoManager, this);\r\n    require(totalAllowance >= _value);\r\n    ercToken.transferFrom(icoManager, poolManager, _value);\r\n    emit TokenTransfer(icoManager, poolManager, _value);\r\n    return true;\r\n  } \r\n  \r\n  /**\r\n  * @dev calculate current pool state\r\n  * @return current pool state\r\n  */\r\n  function poolState_() private view returns(uint8) {\r\n    if(block.timestamp >= startRaising && block.timestamp < raisingTimeout) {\r\n      return 1;\r\n    } \r\n    else if(block.timestamp >= raisingTimeout && block.timestamp < icoStart) {\r\n      return 2;\r\n    } \r\n    else if(block.timestamp >= icoStart && block.timestamp < fundDeprecatedTimeout) {\r\n      if (minimalFundSize > totalAcceptedETH.add(collectedFundForTokens)) {\r\n        return 3;\r\n      } \r\n      else {\r\n        return 4;\r\n      }\r\n    } \r\n    else if(block.timestamp >= fundDeprecatedTimeout) {\r\n      return 0xFF;\r\n    } \r\n    else {\r\n      return 0;\r\n    }\r\n  }  \r\n\r\n  /**\r\n  * @dev returns current pool state\r\n  * @return current pool state\r\n  */\r\n  function poolState() public view returns(uint8) {\r\n    return poolState_();\r\n  }\r\n}","abiDocs":[{"constant":true,"inputs":[],"name":"startRaising","payable":false,"stateMutability":"view","type":"function","signature":"startRaising()","signatureHash":"10db4c06"},{"constant":false,"inputs":[{"name":"_tokenAddress","type":"address"}],"name":"setTargetToken","payable":false,"stateMutability":"nonpayable","type":"function","signature":"setTargetToken(address)","signatureHash":"1b66cb00"},{"constant":false,"inputs":[{"name":"_value","type":"uint256"}],"name":"releaseInterest","payable":false,"stateMutability":"nonpayable","type":"function","signature":"releaseInterest(uint256)","signatureHash":"2627400b"},{"constant":false,"inputs":[{"name":"_value","type":"uint256"}],"name":"getRaisingETH","payable":false,"stateMutability":"nonpayable","type":"function","signature":"getRaisingETH(uint256)","signatureHash":"2c86884e"},{"constant":true,"inputs":[],"name":"icoManager","payable":false,"stateMutability":"view","type":"function","signature":"icoManager()","signatureHash":"319df3bf"},{"constant":true,"inputs":[],"name":"targetToken","payable":false,"stateMutability":"view","type":"function","signature":"targetToken()","signatureHash":"327107f7"},{"constant":true,"inputs":[],"name":"allowedTokens","payable":false,"stateMutability":"view","type":"function","signature":"allowedTokens()","signatureHash":"5284d6d0"},{"constant":true,"inputs":[],"name":"poolState","payable":false,"stateMutability":"view","type":"function","signature":"poolState()","signatureHash":"641ad8a9"},{"constant":true,"inputs":[{"name":"","type":"address"}],"name":"approvedInvestors","payable":false,"stateMutability":"view","type":"function","signature":"approvedInvestors(address)","signatureHash":"6e4c1f34"},{"constant":true,"inputs":[],"name":"minimalDeposit","payable":false,"stateMutability":"view","type":"function","signature":"minimalDeposit()","signatureHash":"6fe4d97a"},{"constant":false,"inputs":[{"name":"_value","type":"uint256"}],"name":"moneyBack","payable":false,"stateMutability":"nonpayable","type":"function","signature":"moneyBack(uint256)","signatureHash":"71c813e2"},{"constant":false,"inputs":[{"name":"_investor","type":"address"}],"name":"approveInvestor","payable":false,"stateMutability":"nonpayable","type":"function","signature":"approveInvestor(address)","signatureHash":"7de14129"},{"constant":true,"inputs":[],"name":"icoStart","payable":false,"stateMutability":"view","type":"function","signature":"icoStart()","signatureHash":"827037db"},{"constant":true,"inputs":[],"name":"owner","payable":false,"stateMutability":"view","type":"function","signature":"owner()","signatureHash":"8da5cb5b"},{"constant":false,"inputs":[{"name":"_value","type":"uint256"}],"name":"releaseEtherFromDepricatedFund","payable":false,"stateMutability":"nonpayable","type":"function","signature":"releaseEtherFromDepricatedFund(uint256)","signatureHash":"96b0285a"},{"constant":true,"inputs":[],"name":"maximalFundSize","payable":false,"stateMutability":"view","type":"function","signature":"maximalFundSize()","signatureHash":"9d12bf0a"},{"constant":true,"inputs":[],"name":"investorETHBalance","payable":false,"stateMutability":"view","type":"function","signature":"investorETHBalance()","signatureHash":"a92274ac"},{"constant":true,"inputs":[],"name":"raisingTimeout","payable":false,"stateMutability":"view","type":"function","signature":"raisingTimeout()","signatureHash":"af971a32"},{"constant":true,"inputs":[],"name":"fundDeprecatedTimeout","payable":false,"stateMutability":"view","type":"function","signature":"fundDeprecatedTimeout()","signatureHash":"c5355a7a"},{"constant":true,"inputs":[],"name":"investorTokenBalance","payable":false,"stateMutability":"view","type":"function","signature":"investorTokenBalance()","signatureHash":"ceb8b067"},{"constant":true,"inputs":[],"name":"totalAcceptedETH","payable":false,"stateMutability":"view","type":"function","signature":"totalAcceptedETH()","signatureHash":"ced09cb7"},{"constant":false,"inputs":[{"name":"_manager","type":"address"}],"name":"setManager","payable":false,"stateMutability":"nonpayable","type":"function","signature":"setManager(address)","signatureHash":"d0ebdbe7"},{"constant":false,"inputs":[{"name":"_value","type":"uint256"}],"name":"releaseTokensFromDepricatedFund","payable":false,"stateMutability":"nonpayable","type":"function","signature":"releaseTokensFromDepricatedFund(uint256)","signatureHash":"d665e37a"},{"constant":true,"inputs":[],"name":"poolManager","payable":false,"stateMutability":"view","type":"function","signature":"poolManager()","signatureHash":"dc4c90d3"},{"constant":true,"inputs":[],"name":"minimalFundSize","payable":false,"stateMutability":"view","type":"function","signature":"minimalFundSize()","signatureHash":"ed48ee3d"},{"constant":false,"inputs":[{"name":"newOwner","type":"address","description":"The address to transfer ownership to.\r"}],"name":"transferOwnership","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function","details":"Allows the current owner to transfer control of the contract to a newOwner.\r","signature":"transferOwnership(address)","signatureHash":"f2fde38b"},{"anonymous":false,"inputs":[{"indexed":true,"name":"to","type":"address"},{"indexed":false,"name":"value","type":"uint256"}],"name":"MoneyBack","type":"event","signature":"MoneyBack(address,uint256)","signatureHash":"f1921e75"},{"anonymous":false,"inputs":[{"indexed":true,"name":"from","type":"address"},{"indexed":true,"name":"to","type":"address"},{"indexed":false,"name":"value","type":"uint256"}],"name":"TransferToIcoManager","type":"event","signature":"TransferToIcoManager(address,address,uint256)","signatureHash":"f34a583a"},{"anonymous":false,"inputs":[{"indexed":true,"name":"from","type":"address"},{"indexed":true,"name":"to","type":"address"},{"indexed":true,"name":"value","type":"uint256"}],"name":"TokenTransfer","type":"event","signature":"TokenTransfer(address,address,uint256)","signatureHash":"d0ed88a3"},{"anonymous":false,"inputs":[{"indexed":true,"name":"from","type":"address"},{"indexed":true,"name":"to","type":"address"},{"indexed":true,"name":"value","type":"uint256"}],"name":"ETHTransfer","type":"event","signature":"ETHTransfer(address,address,uint256)","signatureHash":"a96f45c7"},{"anonymous":false,"inputs":[{"indexed":true,"name":"form","type":"address"},{"indexed":true,"name":"to","type":"address"},{"indexed":true,"name":"value","type":"uint256"}],"name":"Invest","type":"event","signature":"Invest(address,address,uint256)","signatureHash":"0657e0c8"},{"anonymous":false,"inputs":[{"indexed":true,"name":"previousOwner","type":"address"},{"indexed":true,"name":"newOwner","type":"address"}],"name":"OwnershipTransferred","type":"event","signature":"OwnershipTransferred(address,address)","signatureHash":"8be0079c"}]}
